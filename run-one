#!/bin/sh
#
#    run-one - run just one instance at a time of some command and
#              unique set of arguments (useful for cronjobs, eg)
#
#    run-this-one - kill any identical command/args processes
#                   before running this one
#
#    run-one-constantly - run-one, but respawn every time that one exits
#
#    run-one-until-success - run-one, but respawn until a successful exit
#
#    run-one-until-failure - run-one, but respawn until an unsuccessful exit
#
#    Copyright (C) 2010-2013 Dustin Kirkland <kirkland@ubuntu.com>
#    Copyright (C) 2016 Nicolas Fleury <github@fleuryn.fr>
#
#    Authors:
#        Dustin Kirkland <kirkland@ubuntu.com>
#        Nicolas Fleury <github@fleuryn.fr>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROG="run-one"

if [ $# -eq 0 ]; then
	echo "ERROR: no arguments specified" 1>&2
	exit 1
fi

# Cache hashes here, to keep one user from DoS'ing another
# Test if home is writeable and owned by the current user;
# which is not always the case -- e.g. daemon
USER=$(id -un)
for i in "${HOME}" "/dev/shm/${PROG}_${USER}"*; do
	if [ -w "$i" ] && [ -O "$i" ]; then
		DIR="$i"
		break
	fi
done
if [ -w "${DIR}" ] && [ -O "${DIR}" ]; then
	DIR="${DIR}/.cache/${PROG}"
else
	DIR=$(mktemp -d "/dev/shm/${PROG}_${USER}_XXXXXXXX")
	DIR="${DIR}/.cache/${PROG}"
fi
mkdir -p "$DIR"

base="$(basename $0)"
#TODO: keep former functionality by setting the proper variable
case $base in
	run-this-one)
		REPLACE=1
		;;
	keep-one-running|run-one-constantly)
		KEEP_RUNNING=1
		;;
	run-one-until-success)
		KEEP_RUNNING=1
		RERUN_TILL_SUCCESS=1
		;;
	run-one-until-failure)
		KEEP_RUNNING=1
		RERUN_TILL_FAILURE=1
		;;
esac

while [[ $# -gt 1 ]]; do
opt="$1"

case $opt in
	--timeout=*)
		TIMEOUT_SECONDS="${opt#*=}"
		;;
	--timeout)
		TIMEOUT_SECONDS="$2"
		shift
		;;
	-K|--force-kill)
		FORCE_KILL=1
		;;
	-r|--replace)
		REPLACE=1
		;;
	-t|--toggle)
		TOGGLE=1
		;;
	-f|--stop-on-failure)
		KEEP_RUNNING=1
		RERUN_TILL_FAILURE=1
		;;
	-s|--stop-on-success)
		KEEP_RUNNING=1
		RERUN_TILL_SUCCESS=1
		;;
	-k|--keep-running)
		KEEP_RUNNING=1
		;;
	--skip-arguments)
		SKIP_ARGUMENTS=1
		;;
	*)
		break ;;
esac
shift
done

if [ -z "$TIMEOUT_SECONDS" ] ; then
	TIMEOUT_SECONDS=5
fi

if [ $# -eq 0 ]; then
	echo "ERROR: no arguments specified" 1>&2
	exit 1
fi

#TODO: check options coherency

# Calculate the hash of the command and arguments
CMD="$@"
if [ "$SKIP_ARGUMENTS" == 1 ] ; then
	CMDHASH=$(echo "$0" | md5sum | awk '{print $1}')
else
	CMDHASH=$(echo "$CMD" | md5sum | awk '{print $1}')
fi
FLAG="$DIR/$CMDHASH"

if [ "$REPLACE" == "1" ] || [ "$TOGGLE" == "1" ] ; then
	if [ -r "$FLAG" ] ; then
		pid=$(head -n 1 $FLAG)
	fi
	flock -xn $FLAG true ||
	if [ -n "$pid" ] && ps $pid >/dev/null 2>&1; then
		FOUND_CMD=1
		kill $pid
		((TIMEOUT_SECONDS*=2))
		while [ $TIMEOUT_SECONDS -gt 0 ] && ps $pid >/dev/null 2>&1; do
			kill $pid > /dev/null 2>&1
			sleep 0.5
			((TIMEOUT_SECONDS--))
		done
		if [ "$FORCE_KILL" == "1" ] ; then
			kill -9 $p
			sleep 0.1
		fi
		if ps $pid >/dev/null 2>&1; then
			ps $pid
			echo "Fail killing process with pid $pid"
		fi
	fi
fi

if [ "$FOUND_CMD" == "1" ] &&  [ "$TOGGLE" == "1" ] ; then
	exit 0
fi

function cleanup
{
	pid=$(head -n 1 $FLAG | cut -d' ' -f1)
	timeout=10
	if [ -n $pid ] && [ $pid -gt 0 ]; then
		echo -n "Killing: $(tail -n 1 $FLAG) nicely " ;
		while ps $pid >/dev/null 2>&1 && [ $timeout -gt 0 ] ; do
			kill $pid
			sleep 0.5
			((timeout -= 1))
			echo -n "."
		done
		echo
		if ps $pid >/dev/null 2>&1; then
			echo "Nice kill failed, using SIGKILL"
			kill -9 $pid
		fi
	fi
	rm $FLAG
	exit
}

backoff=0
retries=0
(
flock -w 3 9 || { echo "Another instance is already running:" ; cat $FLAG ; exit 1 ; }
trap cleanup  SIGHUP SIGINT SIGTERM
if [ "$KEEP_RUNNING" == "1" ] ; then
	while true; do
		echo TEST
		# Run the specified command, assuming we can flock this command string's hash
		#set +e
		"$@" &
		SUBPROCESS_PID=$!
		echo $SUBPROCESS_PID $$ > $FLAG
		echo "$@" >> $FLAG
		wait $SUBPROCESS_PID
		if [ "$?" = 0 ]; then
			# If we were waiting for success, we're done
			[ "$RERUN_TILL_SUCCESS" = "1" ] && exit $?
			# Last run finished successfully, reset to minimum back-off of 1 second
			backoff=0
		else
			# If we were waiting for failure, we're done
			[ "$RERUN_TILL_FAILURE" = "1" ]  && exit $?
			# Last run failed, so slow down the retries
			retries=$((retries + 1))
			backoff=$((retries / 10))
			logger -t "${base}[$$]" "last run failed; sleeping [$backoff] seconds before next run"
		fi
		# Don't sleep more than 60 seconds
		[ $backoff -gt 60 ] && backoff=60
		sleep $backoff &
		wait $!
	done
else
	"$@" &
	SUBPROCESS_PID=$!
	echo $SUBPROCESS_PID $$ > $FLAG
	echo "$@" >> $FLAG
	wait $SUBPROCESS_PID
fi
rm -f $FLAG
) 9>>$FLAG
